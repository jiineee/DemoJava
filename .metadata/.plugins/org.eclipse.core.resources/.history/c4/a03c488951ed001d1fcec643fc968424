package day17.api.ramda.basic;

public class MainClass {
	public static void main(String[] args) {
		
		/*
		//car의 run을 사용할 때마다 매번 다른기능으로 사용해야한다면 => 익명클래스를 사용할 수 있습니다.
		Car car = new Car() {
			
			@Override
			public void run() {
				System.out.println("익명 객체로 생성된 car");
				
			}
		};
		
		car.run();
		
		
		Car car2 = new Car() {
			
			@Override
			public void run() {
				System.out.println("다른 내용의 익명 객체로 생성된 car");
				
			}
		};
		car2.run();
		*/
		
		//익명객체 표현 문법 => 람다 표현형식으로 사용이 가능
		Person p = new Person();
		p.gretting(new Say01() {
			
			@Override
			public void hello() {
				System.out.println("헬로우기능!");
				
			}
		});
		
		//Say01이 가지고 있는 hello를 전달하는 모형
		p.gretting( () -> {System.out.println("람다 헬로우!");} );
		//1문법 - 사용할 문장이 1줄이라면 {} 생략가능
		p.gretting(() -> System.out.println("람다 헬로우!"));

//		p.greeting(new Say02() {
//			
//			@Override
//			public String hello(String a, int b) {
//				//프로그래머가 작성한 내용
//				return a+b;
//			}
//		});
	
		//2문법 - 람다의 매개변수는 타입이 생략
		//	   - 프로그램 코드가 한줄이라면 return도 생략 
		p.greeting( (a,b) ->  a+b);
		
		//greeting의 3번째 메서드에 전달되는 값이 짝수? 홀수인지 판별
		
		p.greeting((a) -> a % 2 == 0 ? "짝수" : "홀수");
		
		
		
		
	}
}















